/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as LayoutAboutRouteImport } from "./routes/_layout/about";
import { Route as LayoutHomeRouteImport } from "./routes/_layout/home";
import { Route as LayoutIndexRouteImport } from "./routes/_layout/index";
import { Route as LayoutRouteRouteImport } from "./routes/_layout/route";
import { Route as LayoutUserUserIdRouteImport } from "./routes/_layout/user/$userId";
import { Route as LayoutUserRouteRouteImport } from "./routes/_layout/user/route";
import { Route as LayoutUserDirtyRouteRouteImport } from "./routes/_layout/userDirty/route";
import { Route as LayoutUserFindErrorRouteRouteImport } from "./routes/_layout/userFindError/route";
import { Route as LayoutUserIndexErrorRouteRouteImport } from "./routes/_layout/userIndexError/route";
import { Route as LayoutUserModalRouteRouteImport } from "./routes/_layout/userModal/route";
import { Route as LayoutUserSaveErrorRouteRouteImport } from "./routes/_layout/userSaveError/route";
import { Route as LayoutUserValidationRouteRouteImport } from "./routes/_layout/userValidation/route";

const LayoutRouteRoute = LayoutRouteRouteImport.update({
  id: "/_layout",
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutHomeRoute = LayoutHomeRouteImport.update({
  id: "/home",
  path: "/home",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutAboutRoute = LayoutAboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserValidationRouteRoute = LayoutUserValidationRouteRouteImport.update({
  id: "/userValidation",
  path: "/userValidation",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserSaveErrorRouteRoute = LayoutUserSaveErrorRouteRouteImport.update({
  id: "/userSaveError",
  path: "/userSaveError",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserModalRouteRoute = LayoutUserModalRouteRouteImport.update({
  id: "/userModal",
  path: "/userModal",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserIndexErrorRouteRoute = LayoutUserIndexErrorRouteRouteImport.update({
  id: "/userIndexError",
  path: "/userIndexError",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserFindErrorRouteRoute = LayoutUserFindErrorRouteRouteImport.update({
  id: "/userFindError",
  path: "/userFindError",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserDirtyRouteRoute = LayoutUserDirtyRouteRouteImport.update({
  id: "/userDirty",
  path: "/userDirty",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserRouteRoute = LayoutUserRouteRouteImport.update({
  id: "/user",
  path: "/user",
  getParentRoute: () => LayoutRouteRoute,
} as any);
const LayoutUserUserIdRoute = LayoutUserUserIdRouteImport.update({
  id: "/$userId",
  path: "/$userId",
  getParentRoute: () => LayoutUserRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  "/user": typeof LayoutUserRouteRouteWithChildren;
  "/userDirty": typeof LayoutUserDirtyRouteRoute;
  "/userFindError": typeof LayoutUserFindErrorRouteRoute;
  "/userIndexError": typeof LayoutUserIndexErrorRouteRoute;
  "/userModal": typeof LayoutUserModalRouteRoute;
  "/userSaveError": typeof LayoutUserSaveErrorRouteRoute;
  "/userValidation": typeof LayoutUserValidationRouteRoute;
  "/about": typeof LayoutAboutRoute;
  "/home": typeof LayoutHomeRoute;
  "/": typeof LayoutIndexRoute;
  "/user/$userId": typeof LayoutUserUserIdRoute;
}
export interface FileRoutesByTo {
  "/user": typeof LayoutUserRouteRouteWithChildren;
  "/userDirty": typeof LayoutUserDirtyRouteRoute;
  "/userFindError": typeof LayoutUserFindErrorRouteRoute;
  "/userIndexError": typeof LayoutUserIndexErrorRouteRoute;
  "/userModal": typeof LayoutUserModalRouteRoute;
  "/userSaveError": typeof LayoutUserSaveErrorRouteRoute;
  "/userValidation": typeof LayoutUserValidationRouteRoute;
  "/about": typeof LayoutAboutRoute;
  "/home": typeof LayoutHomeRoute;
  "/": typeof LayoutIndexRoute;
  "/user/$userId": typeof LayoutUserUserIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_layout": typeof LayoutRouteRouteWithChildren;
  "/_layout/user": typeof LayoutUserRouteRouteWithChildren;
  "/_layout/userDirty": typeof LayoutUserDirtyRouteRoute;
  "/_layout/userFindError": typeof LayoutUserFindErrorRouteRoute;
  "/_layout/userIndexError": typeof LayoutUserIndexErrorRouteRoute;
  "/_layout/userModal": typeof LayoutUserModalRouteRoute;
  "/_layout/userSaveError": typeof LayoutUserSaveErrorRouteRoute;
  "/_layout/userValidation": typeof LayoutUserValidationRouteRoute;
  "/_layout/about": typeof LayoutAboutRoute;
  "/_layout/home": typeof LayoutHomeRoute;
  "/_layout/": typeof LayoutIndexRoute;
  "/_layout/user/$userId": typeof LayoutUserUserIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/user"
    | "/userDirty"
    | "/userFindError"
    | "/userIndexError"
    | "/userModal"
    | "/userSaveError"
    | "/userValidation"
    | "/about"
    | "/home"
    | "/"
    | "/user/$userId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/user"
    | "/userDirty"
    | "/userFindError"
    | "/userIndexError"
    | "/userModal"
    | "/userSaveError"
    | "/userValidation"
    | "/about"
    | "/home"
    | "/"
    | "/user/$userId";
  id:
    | "__root__"
    | "/_layout"
    | "/_layout/user"
    | "/_layout/userDirty"
    | "/_layout/userFindError"
    | "/_layout/userIndexError"
    | "/_layout/userModal"
    | "/_layout/userSaveError"
    | "/_layout/userValidation"
    | "/_layout/about"
    | "/_layout/home"
    | "/_layout/"
    | "/_layout/user/$userId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/home": {
      id: "/_layout/home";
      path: "/home";
      fullPath: "/home";
      preLoaderRoute: typeof LayoutHomeRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/about": {
      id: "/_layout/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof LayoutAboutRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userValidation": {
      id: "/_layout/userValidation";
      path: "/userValidation";
      fullPath: "/userValidation";
      preLoaderRoute: typeof LayoutUserValidationRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userSaveError": {
      id: "/_layout/userSaveError";
      path: "/userSaveError";
      fullPath: "/userSaveError";
      preLoaderRoute: typeof LayoutUserSaveErrorRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userModal": {
      id: "/_layout/userModal";
      path: "/userModal";
      fullPath: "/userModal";
      preLoaderRoute: typeof LayoutUserModalRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userIndexError": {
      id: "/_layout/userIndexError";
      path: "/userIndexError";
      fullPath: "/userIndexError";
      preLoaderRoute: typeof LayoutUserIndexErrorRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userFindError": {
      id: "/_layout/userFindError";
      path: "/userFindError";
      fullPath: "/userFindError";
      preLoaderRoute: typeof LayoutUserFindErrorRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/userDirty": {
      id: "/_layout/userDirty";
      path: "/userDirty";
      fullPath: "/userDirty";
      preLoaderRoute: typeof LayoutUserDirtyRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/user": {
      id: "/_layout/user";
      path: "/user";
      fullPath: "/user";
      preLoaderRoute: typeof LayoutUserRouteRouteImport;
      parentRoute: typeof LayoutRouteRoute;
    };
    "/_layout/user/$userId": {
      id: "/_layout/user/$userId";
      path: "/$userId";
      fullPath: "/user/$userId";
      preLoaderRoute: typeof LayoutUserUserIdRouteImport;
      parentRoute: typeof LayoutUserRouteRoute;
    };
  }
}

interface LayoutUserRouteRouteChildren {
  LayoutUserUserIdRoute: typeof LayoutUserUserIdRoute;
}

const LayoutUserRouteRouteChildren: LayoutUserRouteRouteChildren = {
  LayoutUserUserIdRoute: LayoutUserUserIdRoute,
};

const LayoutUserRouteRouteWithChildren = LayoutUserRouteRoute._addFileChildren(LayoutUserRouteRouteChildren);

interface LayoutRouteRouteChildren {
  LayoutUserRouteRoute: typeof LayoutUserRouteRouteWithChildren;
  LayoutUserDirtyRouteRoute: typeof LayoutUserDirtyRouteRoute;
  LayoutUserFindErrorRouteRoute: typeof LayoutUserFindErrorRouteRoute;
  LayoutUserIndexErrorRouteRoute: typeof LayoutUserIndexErrorRouteRoute;
  LayoutUserModalRouteRoute: typeof LayoutUserModalRouteRoute;
  LayoutUserSaveErrorRouteRoute: typeof LayoutUserSaveErrorRouteRoute;
  LayoutUserValidationRouteRoute: typeof LayoutUserValidationRouteRoute;
  LayoutAboutRoute: typeof LayoutAboutRoute;
  LayoutHomeRoute: typeof LayoutHomeRoute;
  LayoutIndexRoute: typeof LayoutIndexRoute;
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutUserRouteRoute: LayoutUserRouteRouteWithChildren,
  LayoutUserDirtyRouteRoute: LayoutUserDirtyRouteRoute,
  LayoutUserFindErrorRouteRoute: LayoutUserFindErrorRouteRoute,
  LayoutUserIndexErrorRouteRoute: LayoutUserIndexErrorRouteRoute,
  LayoutUserModalRouteRoute: LayoutUserModalRouteRoute,
  LayoutUserSaveErrorRouteRoute: LayoutUserSaveErrorRouteRoute,
  LayoutUserValidationRouteRoute: LayoutUserValidationRouteRoute,
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutHomeRoute: LayoutHomeRoute,
  LayoutIndexRoute: LayoutIndexRoute,
};

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(LayoutRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
